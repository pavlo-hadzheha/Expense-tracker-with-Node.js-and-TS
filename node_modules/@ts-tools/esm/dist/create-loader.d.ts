import ts from 'typescript';
export type ModuleFormat = 'builtin' | 'commonjs' | 'json' | 'module' | 'wasm';
/** @url https://nodejs.org/docs/latest-v16.x/api/esm.html#resolvespecifier-context-defaultresolve */
export type ResolveHook = (specifier: string, context: {
    parentURL?: string;
    conditions: string[];
}, defaultResolve: ResolveHook) => {
    url: string;
    format?: ModuleFormat;
    shortCircuit?: boolean;
};
/** @url https://nodejs.org/docs/latest-v16.x/api/esm.html#loadurl-context-defaultload */
export type LoadHook = (url: string, context: {
    format?: ModuleFormat;
}, defaultTransformSource: LoadHook) => {
    source: string | SharedArrayBuffer | Uint8Array;
    format: ModuleFormat;
    shortCircuit?: boolean;
};
export interface CreateLoaderOptions {
    compilerOptions: ts.CompilerOptions;
    cwd: string;
}
export declare function createLoader({ compilerOptions, cwd }: CreateLoaderOptions): {
    resolve: ResolveHook;
    load: LoadHook;
};
//# sourceMappingURL=create-loader.d.ts.map